# -*- coding: utf-8 -*-
"""Weather_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uHndk8BtH2SYwwWpWEPRcJum_TfgJ9R2
"""

from google.colab import files

# Upload file dari laptop
uploaded = files.upload()

import pandas as pd

# Baca file csv
df = pd.read_csv("weatherHistory.csv")

# Tampilkan 5 baris pertama
df.head()

# Info tentang dataset
df.info()

# Statistik dasar (mean, max, min, dll)
df.describe()

import matplotlib.pyplot as plt
import pandas as pd

# Tanggal dalam datetime
df['Formatted Date'] = pd.to_datetime(df['Formatted Date'], utc=True)

# Hitung rata-rata bulanan
monthly_temp = df.groupby(df['Formatted Date'].dt.to_period("M"))['Temperature (C)'].mean()
monthly_temp.index = monthly_temp.index.to_timestamp()

# Hitung rata-rata tahunan
yearly_temp = df.groupby(df['Formatted Date'].dt.year)['Temperature (C)'].mean()
yearly_temp.index = pd.to_datetime(yearly_temp.index.astype(str) + "-01-01")

# Plot
plt.figure(figsize=(14,6))

# Garis bulanan
plt.plot(monthly_temp.index, monthly_temp.values, color="tab:blue", linewidth=1.5, label="Rata-rata Suhu Bulanan")

# Garis tahunan
plt.plot(yearly_temp.index, yearly_temp.values, color="red", linestyle="--", linewidth=2, label="Rata-rata Suhu Tahunan")

# Tambahkan shading untuk musim dingin & panas
for year in range(2006, 2017):
    # Musim dingin (Des–Feb)
    plt.axvspan(pd.Timestamp(f"{year}-12-01"), pd.Timestamp(f"{year+1}-02-28"), color="skyblue", alpha=0.2)
    # Musim panas (Jun–Aug)
    plt.axvspan(pd.Timestamp(f"{year}-06-01"), pd.Timestamp(f"{year}-08-31"), color="lightcoral", alpha=0.2)

# Tampilan
plt.title("Tren Suhu Bulanan dan Tahunan (2006–2016)", fontsize=16, fontweight="bold")
plt.xlabel("Tahun", fontsize=12)
plt.ylabel("Suhu (°C)", fontsize=12)
plt.grid(alpha=0.3)
plt.legend(fontsize=11)
plt.tight_layout()
plt.show()

# Fungsi klasifikasi cuaca
def classify_weather(row):
    if row['Precip Type'] == 'rain':
        return "Hujan"
    elif row['Precip Type'] == 'snow':
        return "Salju"
    elif row['Temperature (C)'] > 25:
        return "Panas"
    else:
        return "Cerah"

# Tambahkan kolom baru
df['Weather Category'] = df.apply(classify_weather, axis=1)

# Lihat hasil kategori
df[['Formatted Date','Temperature (C)','Precip Type','Weather Category']].head(10)

# Hitung jumlah tiap kategori
category_counts = df['Weather Category'].value_counts()
print(category_counts)

import seaborn as sns
import matplotlib.pyplot as plt

# Buat Bar Chart
plt.figure(figsize=(8,6))
sns.countplot(x='Weather Category', data=df, order=df['Weather Category'].value_counts().index)
plt.title("Kategori Cuaca Bar Chart")
plt.ylabel("Jumlah")
plt.xlabel("Kategori Cuaca")
plt.show()

# Buat Pie Chart
df['Weather Category'].value_counts().plot.pie(autopct='%1.1f%%', figsize=(6,6))
plt.title("Kategori Cuaca Pie Chart (%)")
plt.show()

# Rata-rata suhu per tahun
yearly_temp = df.groupby(df['Formatted Date'].dt.year)['Temperature (C)'].mean()
print(yearly_temp)

# Install library yang diperlukan
!pip install replicate python-dotenv

import os
from replicate.client import Client
from dotenv import load_dotenv

# === Mount Google Drive untuk akses file .env ===
from google.colab import drive
drive.mount('/content/drive')

# === Arahkan ke folder tempat file .env disimpan ===
env_path = "/content/drive/MyDrive/weather-capstone/.env"

# Load .env
load_dotenv(env_path)

# Ambil token dari .env
api_token = os.getenv("REPLICATE_API_TOKEN")

# Jika tidak ada di .env, fallback ke input manual
if not api_token:
    api_token = input("Masukkan API Token Replicate Anda: ")

if not api_token:
    raise ValueError("API token Replicate tidak ditemukan! Pastikan file .env sudah benar atau masukkan manual.")

# Buat client Replicate
replicate = Client(
    api_token=api_token,
    headers={"User-Agent": "replicate-google-colab-example/1.0"}
)

# === Prompt ke model ===
output = replicate.run(
    "meta/meta-llama-3-70b-instruct",
    input={
        "prompt": (
            "Saya memiliki data cuaca tahunan dengan suhu rata-rata setiap tahun. "
            "Tolong buat ringkasan singkat dalam 3 kalimat tentang tren suhu tahunan ini "
            "dengan menggunakan bahasa Indonesia:\n" + str(yearly_temp)
        )
    }
)

# Cetak hasil
print("".join(output))

# Install library yang diperlukan
!pip install replicate python-dotenv

import os
from replicate.client import Client
from dotenv import load_dotenv

# === Mount Google Drive untuk akses file .env ===
from google.colab import drive
drive.mount('/content/drive')

# === Arahkan ke folder tempat file .env disimpan ===
env_path = "/content/drive/MyDrive/weather-capstone/.env"

# Load .env
load_dotenv(env_path)

# Ambil token dari .env
api_token = os.getenv("REPLICATE_API_TOKEN")

# Jika tidak ada di .env, fallback ke input manual
if not api_token:
    api_token = input("Masukkan API Token Replicate Anda: ")

if not api_token:
    raise ValueError("API token Replicate tidak ditemukan! Pastikan file .env sudah benar atau masukkan manual.")

# Buat client Replicate
replicate = Client(
    api_token=api_token,
    headers={"User-Agent": "replicate-google-colab-example/1.0"}
)

# === Prompt 1: Ringkasan Tren ===
prompt_trend = (
    "Saya memiliki data suhu tahunan berikut:\n"
    + str(yearly_temp)
    + "\n\n"
    "Tolong buat ringkasan singkat dalam 3 kalimat tentang tren suhu tahunan ini. "
    "Gunakan bahasa Indonesia."
)

# === Prompt 2: Insight Utama ===
prompt_insight = (
    "Berikut adalah data suhu tahunan:\n"
    + str(yearly_temp)
    + "\n\n"
    "Jelaskan 3 insight utama dari data ini, misalnya tahun terpanas, "
    "tren kenaikan atau penurunan, dan kestabilan suhu. Gunakan bahasa Indonesia."
)

# === Prompt 3: Rekomendasi ===
prompt_recommendation = (
    "Berdasarkan data suhu tahunan berikut:\n"
    + str(yearly_temp)
    + "\n\n"
    "Berikan 2 rekomendasi singkat terkait dampak perubahan suhu ini "
    "untuk lingkungan, kesehatan, atau pertanian. Gunakan bahasa Indonesia."
)

# === Prompt 4: Testing ===
prompt_test = (
    "Berikut adalah data suhu harian:\n"
    + str(df['Temperature (C)'].tolist()[:200])  # ambil 200 data biar tidak overload
    + "\n\n"
    "Berdasarkan data di atas, sebutkan suhu tertinggi dan terendah yang ada. "
    "Gunakan bahasa Indonesia."
)

# === Jalankan semua prompt ===
for title, prompt in [
    ("Ringkasan Tren", prompt_trend),
    ("Insight Utama", prompt_insight),
    ("Rekomendasi", prompt_recommendation),
    ("Testing", prompt_test),
]:
    print("="*40)
    print(title)
    print("="*40)
    output = replicate.run(
        "meta/meta-llama-3-70b-instruct",
        input={"prompt": prompt}
    )
    print("".join(output))
    print("\n")

# Menampilkan suhu tertinggi dan terendah di dataset WeatherHistory
print("Suhu maksimum di dataset:", df['Temperature (C)'].max())
print("Suhu minimum di dataset:", df['Temperature (C)'].min())